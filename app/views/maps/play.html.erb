<%= javascript_include_tag 'jquery-2.1.3.min' %>
<h1>Play Test</h1>

<p id="notice"><%= notice %></p>
<%= render 'login' %>\
<%= render 'register' %>

<script>
  var mapId = <%= @map.id %>;
  var xOffset = 0;
  var yOffset = 0;
  var edgeSize = 15;
  var edgeWidth = 1;
  var previousPointX;
  var previousPointY;
  var down = false;
  var hexLib;
  var context;
  var mouseDown = false;
  var currAdnIcon = null;
  var currMbuIcon = null;
  var hexes;
  var countryColor = null;
  var countryId = null;
  var stateMode = false;
  var stateColor = null;
  var stateId = null;
  var pathMode = false;
  var pathStart = false;
  var frontier=[];
  var globalCounter=0;

  //Preload Hex icons
  <% @map.hex_images.each do |image| %>
    var <%= image[:name] %> = new Image();
    <!-- //< %= image[:name] %>.src = "<%= image[:path] %>"; -->
    <%= image[:name] %>.src = "<%= asset_path image[:path].gsub(/.*\//,'') %>";
  <% end %>
  //Preload add ons
  <% @map.addon_images.each do |image| %>
    var <%= image[:name] %> = new Image();
    <!-- //< %= image[:name] %>.src = "<%= image[:path] %>"; -->
    <%= image[:name] %>.src = "<%= asset_path image[:path].gsub(/.*\//,'') %>";
  <% end %>
  //Preload MoBile Units
  <% @map.mbu_images.each do |image| %>
    var <%= image[:name] %> = new Image();
    <!-- //< %= image[:name] %>.src = "<%= image[:path] %>"; -->
    <%= image[:name] %>.src = "<%= asset_path image[:path].gsub(/.*\//,'') %>";
  <% end %>

  hexAddons = {
    <% @map.addon_images.each do |image| %>
      "<%= image[:name] %>": <%= image[:name] %><%= image == @map.addon_images.last ? "" : "," %>
    <% end %>
  };

  hexTerrains = {
    <% @map.hex_images.each do |image| %>
      "<%= image[:name] %>": <%= image[:name] %><%= image == @map.hex_images.last ? "" : "," %>
    <% end %>
  };

  hexMbus = {
    <% @map.mbu_images.each do |image| %>
      "<%= image[:name] %>": <%= image[:name] %><%= image == @map.mbu_images.last ? "" : "," %>
    <% end %>
  };

  window.onload = function() {
    canvas = document.getElementById("myCanvas");
    hexLib = new hexDefinition(edgeSize);
    render();
    var paintButton = function(buttonCanvas,color,doBorder) {
      buttonCtx = buttonCanvas.getContext('2d');
    //buttonCtx.beginPath();
    //buttonCtx.clearRect(0, 0, 40, 30);
      buttonCtx.fillStyle = color;
      buttonCtx.fillRect(0,0,buttonCanvas.width,buttonCanvas.height);
      if(doBorder) {
        buttonCtx.moveTo(0,0);
        buttonCtx.lineTo(0,buttonCanvas.height);
        buttonCtx.lineTo(buttonCanvas.width,buttonCanvas.height);
        buttonCtx.lineTo(buttonCanvas.width,0);
        buttonCtx.lineTo(0,0);
        buttonCtx.lineWidth = 3;
        buttonCtx.strokeStyle = "#444";
        buttonCtx.stroke();   
      }
    };

    $(".adnIconBox").click(function(e) {
      setAdnIcon(this.id);
    });

    $(".mbuIconBox").click(function(e) {
      setMbuIcon(this.id);
    });

    canvas.onmousedown = function(e) {
      mouseDown = true;
    };
    canvas.ondblclick = function(e) {
      processBackgroundEvt(e);
    };
    canvas.onmouseup = function(e) {
      mouseDown = false;
      processBackgroundEvt(e);
    };
    canvas.onmousemove = function(e) {
      if(mouseDown) {
        processBackgroundEvt(e);
      };
    };
  };

    var processBackgroundEvt = function(e) {
        down = false;
        var x;
        var y;
        if (e.pageX || e.pageY) {
          x = e.pageX;
          y = e.pageY;
        }
        else {
          x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
          y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        x -= canvas.offsetLeft;
        y -= canvas.offsetTop;

        var result = hexLib.getReferencePoint(x - xOffset, y - yOffset);
        if(currAdnIcon) { 
          jQuery.post("/hexes/"+mapId+"/"+result.u+"/"+result.v, {hex: {map_id: mapId, x: result.u, y: result.v, overlay: currAdnIcon}}, function( data ) { /*if ( data ) { console.log("set: "+JSON.stringify(data)); }*/ });
          hexes[result.u][result.v].overlay=currAdnIcon;
        }
        else if(currMbuIcon) { 
          jQuery.post("/hexes/"+mapId+"/"+result.u+"/"+result.v, {hex: {map_id: mapId, x: result.u, y: result.v, mobile_unit: currMbuIcon}}, function( data ) { /*if ( data ) { console.log("set: "+JSON.stringify(data)); }*/ });
          hexes[result.u][result.v].mobile_unit=currMbuIcon;
        }
        if(currAdnIcon || currMbuIcon) { 
          drawBackground(hexes[result.u][result.v]);
        }
        else if(pathMode) {
          if(pathStart) {
            findPath(context, pathStart, result, pickState);
            pathStart=false;
          }
          else {
            pathStart=result;
          }
        }
     }

     var drawBackground = function(thisHex) {
      var img = hexTerrains[thisHex.image];
      var ovly = hexAddons[thisHex.overlay];
      var mbu = hexMbus[thisHex.mobile_unit];
      if ( img === undefined) {
        return;
      }
      var center = hexLib.getPixelCoordinates(thisHex.x, thisHex.y);
      imx = (center.x - hexLib.s / 2.0) - 5.81 + xOffset;
      imy = (center.y - hexLib.a / 2.0) + 0.4 + yOffset;
      addonX = 4;
      addonY= 2.5;
      context.drawImage(img,imx,imy,hexLib.hexagon_narrow_width+addonX,hexLib.hexagon_narrow_width+addonY);
      ovly?context.drawImage(ovly,imx,imy,hexLib.hexagon_narrow_width+addonX,hexLib.hexagon_narrow_width+addonY):null;
      mbu?context.drawImage(mbu,imx,imy,hexLib.hexagon_narrow_width+addonX,hexLib.hexagon_narrow_width+addonY):null;
    }

    function setAdnIcon(fileName) {
      currAdnIcon=fileName;
      currMbuIcon=null;
      pathMode=false;
      stateMode=false;
    }

    function setMbuIcon(fileName) {
      currMbuIcon=fileName;
      currAdnIcon=null;
      pathMode=false;
      stateMode=false;
    }

    function fillSpace(context, hexCoordinates, setFunc) {
      hex=hexes[hexCoordinates.u][hexCoordinates.v];
      var startState=hex.province_id;
      frontier=[];
      __fillSpace(context, startState, hex, setFunc);
      globalCounter=0;
      for (var i = 0; i < hexes.length; i++) {
        for (var j = 0; j < hexes[i].length; j++) {
          drawBackground(hexes[i][j]);
        }
      }
      drawBorders(hexes);
    }

    function __fillSpace(context, startState, hex, setFunc) {
      if(hex.province_id == stateId) {
        console.log("Same state!!!");
        return;
      }
globalCounter++;
if(globalCounter > 900) { return; }
      if(above(hex) && !(frontier[above(hex).x] && frontier[above(hex).x][above(hex).y]) && above(hex).country_id==hex.country_id && above(hex).province_id==startState) {
        hc={"u":above(hex).x,"v":above(hex).y};
        if(!frontier[hc.u]) { frontier[hc.u]=[]; }
        frontier[hc.u][hc.v]=true;
        if(typeof(setFunc) == "function") {
          setFunc(context,hc,stateColor,stateId,hex.country_id);
        }
        drawEdge(context,hc); 
        __fillSpace(context, startState, above(hex), setFunc);
      }
      if(upperLeft(hex) && !(frontier[upperLeft(hex).x] && frontier[upperLeft(hex).x][upperLeft(hex).y]) && upperLeft(hex).country_id==hex.country_id && upperLeft(hex).province_id==startState) {
        hc={"u":upperLeft(hex).x,"v":upperLeft(hex).y};
        if(!frontier[hc.u]) { frontier[hc.u]=[]; }
        frontier[hc.u][hc.v]=true;
        if(typeof(setFunc) == "function") {
          setFunc(context,hc,stateColor,stateId,hex.country_id);
        }
        drawEdge(context, hc); 
        __fillSpace(context, startState, upperLeft(hex), setFunc);
      }
      if(upperRight(hex) && !(frontier[upperRight(hex).x] && frontier[upperRight(hex).x][upperRight(hex).y]) && upperRight(hex).country_id==hex.country_id && upperRight(hex).province_id==startState) {
        hc={"u":upperRight(hex).x,"v":upperRight(hex).y};
        if(!frontier[hc.u]) { frontier[hc.u]=[]; }
        frontier[hc.u][hc.v]=true;
        if(typeof(setFunc) == "function") {
          setFunc(context,hc,stateColor,stateId,hex.country_id);
        }
        drawEdge(context, hc); 
        __fillSpace(context, startState, upperRight(hex), setFunc);
      }
      if(lowerRight(hex) && !(frontier[lowerRight(hex).x] && frontier[lowerRight(hex).x][lowerRight(hex).y]) && lowerRight(hex).country_id==hex.country_id && lowerRight(hex).province_id==startState) {
        hc={"u":lowerRight(hex).x,"v":lowerRight(hex).y};
        if(!frontier[hc.u]) { frontier[hc.u]=[]; }
        frontier[hc.u][hc.v]=true;
        if(typeof(setFunc) == "function") {
          setFunc(context,hc,stateColor,stateId,hex.country_id);
        }
        drawEdge(context, hc);
        __fillSpace(context, startState, lowerRight(hex), setFunc);
      }
      if(lowerLeft(hex) && !(frontier[lowerLeft(hex).x] && frontier[lowerLeft(hex).x][lowerLeft(hex).y]) && lowerLeft(hex).country_id==hex.country_id && lowerLeft(hex).province_id==startState) {
        hc={"u":lowerLeft(hex).x,"v":lowerLeft(hex).y};
        if(!frontier[hc.u]) { frontier[hc.u]=[]; }
        frontier[hc.u][hc.v]=true;
        if(typeof(setFunc) == "function") {
          setFunc(context,hc,stateColor,stateId,hex.country_id);
        }
        drawEdge(context, hc);
        __fillSpace(context, startState, lowerLeft(hex), setFunc);
      }
      if(below(hex) && !(frontier[below(hex).x] && frontier[below(hex).x][below(hex).y]) && below(hex).country_id==hex.country_id && below(hex).province_id==startState) {
        hc={"u":below(hex).x,"v":below(hex).y};
        if(!frontier[hc.u]) { frontier[hc.u]=[]; }
        frontier[hc.u][hc.v]=true;
        if(typeof(setFunc) == "function") {
          setFunc(context,hc,stateColor,stateId,hex.country_id);
        }
        drawEdge(context, hc); 
        __fillSpace(context, startState, below(hex), setFunc);
      }
    }

    function findPath(context, startHex, endHex, setFunc) {
      var oppX;
      var oppY;
      var testX;
      var testY;
      var xUp;
      var yUp;
      if(startHex.u>endHex.u) {
        //Count down
        oppX = function(hex) {
                 hex.u--
               }
        testX = function(hexSrc,hexDest) {
                 return hexSrc.u>hexDest.u;
               }
        xUp=false;
      }
      else {
        //Count up
        oppX = function(hex) {
                 hex.u++;
               }
        testX = function(hexSrc,hexDest) {
                 return hexSrc.u<hexDest.u;
               }
        xUp=true;
      }
      if(startHex.v>endHex.v) {
        //Count down
        oppY = function(hex) {
                 hex.v--;
               }
        testY = function(hexSrc,hexDest) {
                 return hexSrc.v>hexDest.v;
               }
        yUp=false;
      }
      else {
        //Count up
        oppY = function(hex) {
                 hex.v++;
               }
        testY = function(hexSrc,hexDest) {
                 return hexSrc.v<hexDest.v;
               }
        yUp=true;
      }
      var workingHex = startHex;
      var lastHex = { "u": workingHex.u, "v": workingHex.v };
      drawEdge(context, workingHex);
      while(JSON.stringify(workingHex)!=JSON.stringify(endHex)) {
        if(yUp) {
          var doY = (workingHex.u%2 || (startHex.u==endHex.u));
          if(testX(workingHex,endHex)) {
            oppX(workingHex);
          }
          if(doY) { //increment y only for odd hexes
            if(testY(workingHex,endHex)) {
              oppY(workingHex);
            }
          }
        }
        else {
          var doY = (!(workingHex.u%2) || (startHex.u==endHex.u));
          if(testX(workingHex,endHex)) {
            oppX(workingHex);
          }
          if(doY) { //increment y only for even hexes
            if(testY(workingHex,endHex)) {
              oppY(workingHex);
            }
          }
        }
        if(JSON.stringify(workingHex)!=JSON.stringify(lastHex)) {
          drawEdge(context, workingHex); 
          if(typeof(setFunc) == "function") {
            setFunc(context,workingHex,stateColor,stateId,countryId);
          }
        }
        lastHex = { "u": workingHex.u, "v": workingHex.v };
      }
    }

    function drawEdge(context, hexCoordinates) {
      var center = hexLib.getPixelCoordinates(hexCoordinates.u, hexCoordinates.v);
      context.beginPath();
      
      //Left most point
      context.moveTo((center.x - hexLib.b / 2.0) + xOffset, center.y + yOffset );
      //line #6
      context.lineTo((center.x - hexLib.s / 2.0) + xOffset, (center.y - hexLib.a / 2.0) + yOffset);
      //line #1
      context.lineTo((center.x + hexLib.s / 2.0) + xOffset, (center.y - hexLib.a / 2.0) + yOffset);
      //line #2
      context.lineTo((center.x + hexLib.b / 2.0) + xOffset, center.y + yOffset);
      //line #3
      context.lineTo((center.x + hexLib.s / 2.0) + xOffset, (center.y + hexLib.a / 2.0) + yOffset);
      //line #4
      context.lineTo((center.x - hexLib.s / 2.0) + xOffset, (center.y + hexLib.a / 2.0)  + yOffset);
      //line #5
      context.lineTo((center.x - hexLib.b / 2.0) + xOffset, center.y + yOffset);
      context.lineWidth = edgeWidth*2;
      context.strokeStyle = "#444";

      context.fillStyle = "rgba(190, 190, 190, 0.25)";
      context.fill();
            
      context.stroke();   
    }

     function drawHex(context, hexCoordinates) {
      var center = hexLib.getPixelCoordinates(hexCoordinates.u, hexCoordinates.v);
      context.beginPath();
      
      //Left most point
      context.moveTo((center.x - hexLib.b/2.0) + xOffset, center.y + yOffset );
      //line #6
      context.lineTo((center.x - hexLib.s/2.0) + xOffset, (center.y - hexLib.a/2.0) + yOffset);
      //line #1
      context.lineTo((center.x + hexLib.s/2.0) + xOffset, (center.y - hexLib.a/2.0) + yOffset);
      //line #2
      context.lineTo((center.x + hexLib.b/2.0) + xOffset, center.y + yOffset);
      //line #3
      context.lineTo((center.x + hexLib.s/2.0) + xOffset, (center.y + hexLib.a/2.0) + yOffset);
      //line #4
      context.lineTo((center.x - hexLib.s/2.0) + xOffset, (center.y + hexLib.a/2.0)  + yOffset);
      //line #5
      context.lineTo((center.x - hexLib.b/2.0) + xOffset, center.y + yOffset);
      context.lineWidth = edgeWidth;
      context.strokeStyle = "#444";

      context.fillStyle = "rgba(190, 190, 190, 0.25)";
      context.fill();
            
      context.stroke();   
    }

    function render() {
      //var canvas = document.getElementById("myCanvas");
      context = canvas.getContext("2d");
      context.clearRect(0, 0, <%= @map.width =%>, <%= @map.length =%>);
      drawHexagonGrid(context);
    }

    function putHexes(data) {
      hexes=[];
//{"id":731,
//"name":null,
//"description":null,
//"map_id":1,
//"country_id":null,
//"province_id":null,
//"created_at":"2015-02-21T05:05:55.000Z",
//"updated_at":"2015-02-21T05:05:55.000Z",
//"creator_id":null,
//"updater_id":null,
//"image":"waterSea",
//"background":null,
//"overlay":null,
//"x":71,
//"y":92,
//"local_image":null,
//"c_border":false,
//"p_border":false}

      for (var i = 0; i < data.length; i++) {
        if(!hexes[data[i].x]) { hexes[data[i].x]=[]; }
        hexes[data[i].x][data[i].y]=data[i];
        drawBackground(hexes[data[i].x][data[i].y]);
      }
      drawBorders(hexes);
    }

    function above(hex) {
      return hexes[hex.x]?hexes[hex.x][hex.y-1]:null;
    }

    function below(hex) {
      return hexes[hex.x]?hexes[hex.x][hex.y+1]:null;
    }

    function upperRight(hex) {
      if(hex.x%2) { //column is odd
        return hexes[hex.x+1]?hexes[hex.x+1][hex.y]:null;
      }
      else { //column is even
        return hexes[hex.x+1]?hexes[hex.x+1][hex.y-1]:null;
      }
    }

     function upperLeft(hex) {
      if(hex.x%2) { //column is odd
        return hexes[hex.x-1]?hexes[hex.x-1][hex.y]:null;
      }
      else { //column is even
        return hexes[hex.x-1]?hexes[hex.x-1][hex.y-1]:null;
      }
    }

     function lowerRight(hex) {
      if(hex.x%2) { //column is odd
        return hexes[hex.x+1]?hexes[hex.x+1][hex.y+1]:null;
      }
      else { //column is even
        return hexes[hex.x+1]?hexes[hex.x+1][hex.y]:null;
      }
    }

     function lowerLeft(hex) {
      if(hex.x%2) { //column is odd
        return hexes[hex.x-1]?hexes[hex.x-1][hex.y+1]:null;
      }
      else { //column is even
        return hexes[hex.x-1]?hexes[hex.x-1][hex.y]:null;
      }
    }

    function drawBorder(hex) {
      var openPath=false;
      var countryPaths = [];
      var statePaths = [];
      var center;
  //line #6 context.lineTo((center.x - hexLib.s/2.0) + xOffset, (center.y - hexLib.a/2.0) + yOffset);
  //line #1 context.lineTo((center.x + hexLib.s/2.0) + xOffset, (center.y - hexLib.a/2.0) + yOffset);
  //line #2 context.lineTo((center.x + hexLib.b/2.0) + xOffset, center.y + yOffset);
  //line #3 context.lineTo((center.x + hexLib.s/2.0) + xOffset, (center.y + hexLib.a/2.0) + yOffset);
  //line #4 context.lineTo((center.x - hexLib.s/2.0) + xOffset, (center.y + hexLib.a/2.0)  + yOffset);
  //line #5 context.lineTo((center.x - hexLib.b/2.0) + xOffset, center.y + yOffset);
  //      context.lineWidth = edgeWidth;
  //      context.strokeStyle = "#444";
  
      center = hexLib.getPixelCoordinates(hex.x, hex.y);
      if(upperLeft(hex)) {
        if(hex.country_id != upperLeft(hex).country_id) {
          //Add Country border upper right
          countryPaths.push({"start":{"x":(center.x - hexLib.b/2.0) + xOffset,"y":center.y + yOffset},"end":{"x":(center.x - hexLib.s/2.0) + xOffset, "y":(center.y - hexLib.a/2.0) + yOffset}});
        }
        else if(hex.province_id != upperLeft(hex).province_id) {
          //Add State border upper right
          statePaths.push({"start":{"x":(center.x - hexLib.b/2.0) + xOffset,"y":center.y + yOffset},"end":{"x":(center.x - hexLib.s/2.0) + xOffset, "y":(center.y - hexLib.a/2.0) + yOffset}});
        }
      }
      if(above(hex)) {
        if(hex.country_id != above(hex).country_id) {
          //Add Country border up top
          countryPaths.push({"start":{"x":(center.x - hexLib.s/2.0) + xOffset, "y":(center.y - hexLib.a/2.0) + yOffset},"end":{"x":(center.x + hexLib.s/2.0) + xOffset, "y":(center.y - hexLib.a/2.0) + yOffset}});
        }
        else if(hex.province_id != above(hex).province_id) {
          //Add State border up top
          statePaths.push({"start":{"x":(center.x - hexLib.s/2.0) + xOffset, "y":(center.y - hexLib.a/2.0) + yOffset},"end":{"x":(center.x + hexLib.s/2.0) + xOffset, "y":(center.y - hexLib.a/2.0) + yOffset}});
        }
      }
      if(upperRight(hex)) {
        if(hex.country_id != upperRight(hex).country_id) {
          //Add Country border up top
          countryPaths.push({"start":{"x":(center.x + hexLib.s/2.0) + xOffset, "y":(center.y - hexLib.a/2.0) + yOffset},"end":{"x":(center.x + hexLib.b/2.0) + xOffset, "y":center.y + yOffset}});
        }
        else if(hex.province_id != upperRight(hex).province_id) {
          //Add State border up top
          statePaths.push({"start":{"x":(center.x + hexLib.s/2.0) + xOffset, "y":(center.y - hexLib.a/2.0) + yOffset},"end":{"x":(center.x + hexLib.b/2.0) + xOffset, "y":center.y + yOffset}});
        }
      }
      if(lowerRight(hex)) {
        if(hex.country_id != lowerRight(hex).country_id) {
          //Add Country border up top
          countryPaths.push({"start":{"x":(center.x + hexLib.b/2.0) + xOffset, "y":center.y + yOffset},"end":{"x":(center.x + hexLib.s/2.0) + xOffset, "y":(center.y + hexLib.a/2.0) + yOffset}});
        }
        else if(hex.province_id != lowerRight(hex).province_id) {
          //Add State border up top
          statePaths.push({"start":{"x":(center.x + hexLib.b/2.0) + xOffset, "y":center.y + yOffset},"end":{"x":(center.x + hexLib.s/2.0) + xOffset, "y":(center.y + hexLib.a/2.0) + yOffset}});
        }
      }
      if(below(hex)) {
        if(hex.country_id != below(hex).country_id) {
          //Add Country border up top
          countryPaths.push({"start":{"x":(center.x + hexLib.s/2.0) + xOffset, "y":(center.y + hexLib.a/2.0) + yOffset},"end":{"x":(center.x - hexLib.s/2.0) + xOffset, "y":(center.y + hexLib.a/2.0)  + yOffset}});
        }
        else if(hex.province_id != below(hex).province_id) {
          //Add State border up top
          statePaths.push({"start":{"x":(center.x + hexLib.s/2.0) + xOffset, "y":(center.y + hexLib.a/2.0) + yOffset},"end":{"x":(center.x - hexLib.s/2.0) + xOffset, "y":(center.y + hexLib.a/2.0)  + yOffset}});
        }
      }
      if(lowerLeft(hex)) {
        if(hex.country_id != lowerLeft(hex).country_id) {
          //Add Country border up top
          countryPaths.push({"start":{"x":(center.x - hexLib.s/2.0) + xOffset, "y":(center.y + hexLib.a/2.0)  + yOffset},"end":{"x":(center.x - hexLib.b/2.0) + xOffset, "y":center.y + yOffset}});
        }
        else if(hex.province_id != lowerLeft(hex).province_id) {
          //Add State border up top
          statePaths.push({"start":{"x":(center.x - hexLib.s/2.0) + xOffset, "y":(center.y + hexLib.a/2.0)  + yOffset},"end":{"x":(center.x - hexLib.b/2.0) + xOffset, "y":center.y + yOffset}});
        }
      }
      //Draw country borders
      for (var w = 0; w < countryPaths.length; w++) {
        context.beginPath();
        context.moveTo(countryPaths[w].start.x,countryPaths[w].start.y);
        context.lineTo(countryPaths[w].end.x,countryPaths[w].end.y);
        context.lineWidth = edgeWidth*3;
        context.strokeStyle = "#000";
        context.stroke();   
      }
      //Draw state borders
      for (var w = 0; w < statePaths.length; w++) {
        context.beginPath();
        context.moveTo(statePaths[w].start.x,statePaths[w].start.y);
        context.lineTo(statePaths[w].end.x,statePaths[w].end.y);
        context.lineWidth = edgeWidth*3;
        context.strokeStyle = "#fff";
        context.stroke();   
      }
    }

    function drawBorders(hexes) {
      for (var i = 0; i < hexes.length; i++) {
        for (var j = 0; j < hexes[i].length; j++) {
          if(!(hexes[i][j])) { continue; }
          drawBorder(hexes[i][j]);

        }
      }
    }

    function drawHexagonGrid(context) {
      var date1 = new Date().getTime();
      var rows = 100;
      var columns = 100;
      var topLeftHex = hexLib.getReferencePoint(0 - xOffset,0 - yOffset);
      var bottomLeftHex = hexLib.getReferencePoint(0 - xOffset,<%= @map.length =%> - yOffset);
      var topRightHex = hexLib.getReferencePoint(<%= @map.width =%> - xOffset,0 - yOffset);
      var offset = 0;
      //for (var i = topLeftHex.u - 1; i <= topRightHex.u + 1; i++) 
      for (var i = 0; i <= topRightHex.u + 1; i++) {
        //for (var j = topLeftHex.v - 1 - Math.round(offset); j < bottomLeftHex.v + 1 - Math.round(offset); j++) 
        for (var j = 0; j < bottomLeftHex.v + 1 - Math.round(offset); j++) {
          drawHex(context, {u:i, v:j});
          //jQuery.get("/hexes/"+mapId+"/"+i+"/"+j, function( data ) { if ( data ) { drawBackground(data); console.log("currHex: "+JSON.stringify(data)); } });
        }
	offset = offset == 0 ? 0.5 : 0;
      }
      var date2 = new Date().getTime();
      document.getElementById("result").innerHTML = "Draw Time: " + (date2 - date1) + " ms";
      //jQuery.get("/hexes/"+mapId, function( data ) { if ( data ) { putHexes(data); console.log("got hexes"); } });
      putHexes(<%= @map.hexes.to_json.to_s.html_safe %>);
    }
  </script>

  <div id="result">Draw Time: 27 ms</div>

<%= content_tag(:div, class: "map") do %>
  <canvas id="myCanvas" width="<%= @map.width =%>" height="<%= @map.length =%>"> </canvas>
<!-- </br> -->
<% end %>
<%= content_tag(:div, class: "hexMbu") do %>
  <% @map.mbu_images.each do |image| %>
    <%= content_tag(:div, id: image[:name], class: "mbuIconBox") do %>
      <%= content_tag(:p, image[:display]) %>
      <%= content_tag(:div, class: "hexIcon") do %>
        <%= image_tag(image[:path].gsub(/.*\//,''), alt: image[:display]) %>
      <% end %>
    <% end %>
  <% end %>
<% end %>
<%= content_tag(:div, class: "hexAddon") do %>
  <% @map.addon_images.each do |image| %>
    <%= content_tag(:div, id: image[:name], class: "adnIconBox") do %>
      <%= content_tag(:p, image[:display]) %>
      <%= content_tag(:div, class: "hexIcon") do %>
        <%= image_tag(image[:path].gsub(/.*\//,''), alt: image[:display]) %>
      <% end %>
    <% end %>
  <% end %>
<% end %>
<%= content_tag(:div, class: "hexLegend") do %>
  <% @map.hex_images.each do |image| %>
    <%= content_tag(:div, id: image[:name], class: "hexIconBox") do %>
      <%= content_tag(:p, image[:display]) %>
      <%= content_tag(:div, class: "hexIcon") do %>
        <%= image_tag(image[:path].gsub(/.*\//,''), alt: image[:display]) %>
      <% end %>
    <% end %>
  <% end %>
<% end %>

</br>
<%= content_tag(:div, class: "navLinks") do %>
  <%= link_to 'Show', @map %> |
  <%= link_to 'Back', maps_path %>
<% end %>
